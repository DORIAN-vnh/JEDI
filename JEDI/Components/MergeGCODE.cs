// MergeGCodeComponent : merges multiple GCode blocks into one continuous GCode program
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Text;
using Grasshopper.Kernel;
using System.Text.RegularExpressions;
using Rhino.Geometry;
using JEDI.Resources;

namespace JEDI.Components
{
    public class MergeGCodeComponent : GH_Component
    {
        public MergeGCodeComponent() : base("Merge GCode", "MergeGCode",
            "Merges multiple GCode blocks into a single program with optional origin resets",
            "JEDI", "Export")
        { }

        public override Guid ComponentGuid => new Guid("AB12EF34-5678-9012-3456-7890ABCDEF12");
        protected override Bitmap Icon => Resource1.EXPORT;

        protected override void RegisterInputParams(GH_InputParamManager p)
        {
            p.AddTextParameter("GCode Blocks", "G", "List of GCode text blocks", GH_ParamAccess.list);
            p.AddBooleanParameter("Reset Origin Between", "Reset", "Insert G0 X0 Y0 between blocks", GH_ParamAccess.item, false);
            p.AddBooleanParameter("Export", "Export", "Export merged GCode to file", GH_ParamAccess.item, false);
            p.AddTextParameter("File Path", "Path", "Path for export file", GH_ParamAccess.item, "");
            p.AddTextParameter("Custom Commands", "Cmds", "Additional GCode commands to insert in batch mode (one per line)", GH_ParamAccess.list);
            p[4].Optional = true;
        }

        protected override void RegisterOutputParams(GH_OutputParamManager p)
        {
            p.AddTextParameter("Merged GCode", "Merged", "Resulting merged GCode", GH_ParamAccess.item);
        }

        protected override void SolveInstance(IGH_DataAccess DA)
        {
            var blocks = new List<string>();
            var customCommands = new List<string>();
            bool reset = false;
            bool export = false;
            string path = "";

            if (!DA.GetDataList(0, blocks)) return;
            DA.GetData(1, ref reset);
            DA.GetData(2, ref export);
            DA.GetData(3, ref path);
            DA.GetDataList(4, customCommands);

            var sb = new StringBuilder();
            sb.AppendLine("; Merged GCode generated by JEDI");

            // Detect G21/G20 from first block
            string firstBlock = blocks.Count > 0 ? blocks[0] : "";
            if (firstBlock.Contains("G20"))
                sb.AppendLine("G20 ; Units in inches");
            else
                sb.AppendLine("G21 ; Units in mm");

            sb.AppendLine("G90 ; Absolute positioning");

            Point3d? lastPoint = null;

            for (int i = 0; i < blocks.Count; i++)
            {
                string cleanedBlock = CleanBlock(blocks[i]);
                var lines = cleanedBlock.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);

                if (i > 0 && reset)
                {
                    sb.AppendLine("; ---- Linking Move to Origin ----");
                    sb.AppendLine("G0 X0 Y0 ; Reset to origin between blocks");
                }

                sb.AppendLine($"; ---- Start of Block {i + 1} ----");
                string lastCommand = "";

                foreach (var line in lines)
                {
                    string trimmed = line.Trim();
                    if (trimmed.StartsWith("G0") && trimmed == lastCommand) continue; // Skip duplicate G0
                    sb.AppendLine(trimmed);
                    lastCommand = trimmed;
                }

                sb.AppendLine($"; ---- End of Block {i + 1} ----\n");
            }

            if (customCommands.Count > 0)
            {
                sb.AppendLine("; ---- Inserted Custom Commands ----");
                foreach (var cmd in customCommands)
                {
                    string trimmed = cmd.Trim();
                    if (!string.IsNullOrWhiteSpace(trimmed))
                        sb.AppendLine(trimmed);
                }
            }

            sb.AppendLine("M5 ; Laser Off");
            sb.AppendLine("M2 ; End of program");

            string result = sb.ToString();

            if (export && !string.IsNullOrWhiteSpace(path))
            {
                try
                {
                    File.WriteAllText(path, result);
                }
                catch (Exception ex)
                {
                    AddRuntimeMessage(GH_RuntimeMessageLevel.Error, $"File write error: {ex.Message}");
                }
            }

            DA.SetData(0, result);
        }

        private string CleanBlock(string block)
        {
            var lines = block.Split(new[] { "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries);
            var filtered = new List<string>();
            foreach (var line in lines)
            {
                string trimmed = line.Trim();
                if (string.IsNullOrWhiteSpace(trimmed)) continue;
                if (trimmed.StartsWith("G90") || trimmed.StartsWith("G21") || trimmed.StartsWith("G20") ||
                    trimmed.StartsWith("M2") || trimmed.StartsWith("M5"))
                    continue;
                filtered.Add(trimmed);
            }
            return string.Join("\n", filtered);
        }
    }
}
